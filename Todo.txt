Backlog:
  -Engine:
    -Purchasing
    -Metal
    -Entity Component System
    -Net/HTTP
    -Android

  -Gameplay:
    -Could have ice blocks that are level blocks that can be used to fill and clear rows but they
     shatter if landed on or if falling down in a cascade. Or, they could turn into a block if the
     ice is cleared which it will be by filling the row or explosion/laser.
    -The UFO could be booster. It could clear 3 rows.
    -Maybe blocks in the visible part of the field could disappear on some levels. For each move,
     one of the colored blocks randomly disappears.
    -Wooden blocks are cleared and shattered only when blocks next to them are cleared by filling a
     row or by bombs.
    -Might have a vertical laser. Can be good to have when dealing with wooden blocks.
  -Rendering:
    -Add dynamic batching of objects with very few indices and no rotation if the saved cost of
     eliminated state changes is greater than the cost of creating the batch. Then, the clouds can
     be batched and drawn in one draw call instead of 100. Also, a lot of particle effects
     (the explosions, block trails, lasers etc.) that have the same texture/material can be batched.
     The GLES3Renderer could scan ahead in the render queue and sum up the number of future state
     changes required to draw each consecutive batchable object of the same material and compare
     that cost to some pseudo cast of creating the batch of that sequence of batchable objects.
     The batch would go into a preallocated VertexBuffer with large capacity that the GLES3Renderer
     owns. Also, the RenderObject function probably needs take Material/GpuVertexBuffer pairs rather
     than RenderableObjects since a batch consists of a GpuVertexBuffer with CPU-side VertexBuffer
     and a Material and not a RenderableObject.
    -Try to compressing bouncing blocks that lands on lower blocks. Compress the vertical welds on
     each side of the compressed block as well.
    -Animation that moves the map hud out of the screen when clicking buttons in the hud. Could work
     in a similar way as the SlidingFieldAnimation.
    -Animation that moves the pause button out of the screen.
  -Make ready for release:
    -Should give free gold coins after a new install?
    -Maybe only one or two continues per game round? Like in Dr. Mario. And you get 10 more moves.
    -Go through all user services and check that all state store/load is enabled.
    -Make sure analytics is enabled and that user terms accept is saved and checked.
    -Make sure analytics debug log is disabled.
    -Make sure the correct product price in cents and receipt is sent to analytics.
    -Do a soft launch in a couple of countries? Maybe the nordic countries and UK? Only english
     localization is needed for that. And/or, before that, a small soft launch only in one country
     instead of a playtest since that may give bettar data than a playtest since the players will
     mostly be the target audince and in the playtest they are not.

Ongoing tasks:
    
  Plan:
    -Major user stories:
        -Find more moves.                                                           ~1 week
        -Purchasing                                                                 ~1 week
        -Items in the next release (match-3, hud, bombs dragged piece)              ~1-2 weeks
        -Interacting with publishers                                                ~1 week
        -Task after publisher (preview pieces, clear blocks)                        ~1-2 weeks
         Total cost:                                                                 5-7 weeks


    -Do:
        -3. Redesign the game HUD:                                                  ~1.5 days
            -Maybe try to invert the gradient and add a shadow from the field.
            -Tune all colors in lower hud.
            -Move the preview piece positions to centered positions now that
             there is no rectangle tilt.
        -2. This item might be moved to after publisher contact:
            Can have levels that have lots of octagons (or circles) instead of      ~7 days
            normal full blocks. The octagons/circles have different colors and
            you clear them by placing blocks of the same color next to them.
            If there is at least 3 neighbor cells in a straight line, with at
            least one octagon and at least one block, with the same color, then
            those cells are cleared. The octagons form bonds to neighbour cells
            of the same color (to full blocks or other octagons). The octagons
            are pulled down by gravity in the same way as colored blocks. Can
            have ShortIPieces like in dr Mario with 2 different colors in the
            same piece? That would go against the fundamental principle that
            blocks of different color do not form bonds. Instead, we might only
            have ShortIPiece with same colors and a new piece which would be like
            a SevenPiece but with only two blocks. Or, we might have pieces with
            different colors but without welds, which may fall appart when
            landing over an edge, which would be like in Puyo Puyo. Maybe the
            matching logic can be like in Puyo Puyo as well?
        -3. Reduce the gain in most sounds (clear blocks, button clicks, start      ~1 day
            game, clear level, etc..). Maybe clean up blocks sound in audacity.
            The music track should be switched for the next attempt to clear a
            level after a failed attempt. Reduce music gain as well.
        -3. Bombs and laser dragged piece with white or red transparent material    ~1 days
            instead of textures.
        -4. Maybe try a "PropellerPiece": XX                                        ~1 days
                                            XX
        -4. Tune all star levels.                                                   ~1 days
        -5. Release.                                                                ~1 days
        -6. Send mail to publishers.
    -After contacted publisher:
        -Remove most glitches in the piece path. For fixing the triangle            ~1 day
         glitches, just use the downwards snapshot fill algorithm but
         adopted for left and right movement as well.
        -Number of preview pieces:                                                  ~5 days
            -Should it really always be 3 selectables? Maybe 2 is a better
             number. Sometimes you could have 3 though. Maybe you always have
             2 block pieces and when you get a special piece (bomb or laser)
             then you have 3, which is like it is in Bubble Witch 3.
            -Is it good to have 2 next preview pieces with regard to maximizing
             revenue at out of moves?
        -Make it more clear that the player is at the end of the level,             ~1 day
         brighter bottom glow or something else. And ther should be a score
         text above the asteroid when at the bottom.
        -Maybe a short delay before clearing filled rows after piece lands?         ~2 days
         And a short particle effect with twinkles in the filled row before
         the blocks gets thrown away?

        -Just try to reduce the risk mixing up the rotate tap with at drag start. Maybe sort out
         by tuning dragBeginDistanceThreshold. Also, could have a threshold distance that the piece
         must travel in order to be placed, or a minimum drag time. Maybe the touch should be
         treated as a rotate if it not considered a valid drag? Right now the drag is just cancelled
         and there is no rotate. Tune the field y position for the zoomed displays since there is
         more room now after removing one row.
        -5. Release.

    -Mid-term future:
        -Sometimes moves that seem feasible are unreachable due to the way pieces are rotated by the AI.
         Maybe look into some new rotation system like SRS. Or simplify the rotations by just saying that
         if there is a contineous path (at least N cells wide, where N is the max width of the piece)
         from the falling piece to the move then it is legal. Just start a new ValidMovesSearch for each
         sub-area that is considered to be connected (by a path) to the upper-most area and add moves
         found in that sub search to the total result. Ideas:
            -Define core parts of the pieces that the
             validMovesSearch changes the MovingPiece to if a rotation fails, and continue the search
             using the core part. If later there is room for the whole piece then change back to the
             whole piece. Core part for the F is a small L, core of all I is just one cell, core of B
             is probably an O square. However, changing the movingPiece in the search will probably
             cause wierd movements and increase the cost of the search. Instead we could find all moves
             that have not been found yet (that dont cause a collision) and try to search back upwards
             using the core part. If the search finds the valid area and it is possible to cover the
             entire upwards search path with complete pieces then that new move is valid. For
             example, the I piece would not fit in a one-cell wide stair, but the core part would and
             therefore this makes sure that is not a valid moves. Example:
                
                The I position is valid (?) since it is possible to cover the the path to the upper
                valid area in I pieces:
                
                X   i X
                XXXXi X
                Xiiii X
                XIXXXXX
                XIXXXXX
                XI
                XX
                
                
                Also F is valid:
                
                XXXXXF X
                X  FFFFX
                XXXXXXXX
                
                
                But what about this. F should not be valid:
                
                XfXXXXXX
                XffXXXXX
                XfXXXXXX
                XfXXXXXX
                XF     X
                XFF    X
                XF     X
                XF     X
                XXXXXXXX
                
                
             Maybe a better solution is simply to find all moves (that dont cause a collision)
             that have not been found yet and check if they overlap with the valid area or is
             right next to it. Add those moves to the total result. Example:
             
                The I position is valid since it is next to the valid area (.) :
                 
                X.....X
                XXXX..X
                XIII..X
                X XXXXX
                X XXXXX


                The I position is valid since it is next to the valid area (.) :
                 
                X.....X
                XXX.XXX
                XIII  X
                X XXXXX
                X XXXXX


                The I position is NOT valid since it is not next to the valid area (.) :
              
                X.....X
                XXXXX.X
                XIII .X
                X XXXXX
                X XXXXX


                F is valid:

                X......X
                XXXXXF.X
                X  FFFFX
                XXXXXXXX


                Also F is valid:

                X......X
                XXXFXXXX
                X FFFF X
                XXXXXXXX


                F is NOT valid:
                
                X......X
                X.XXXXXX
                X. XXXXX
                X XXXXXX
                X XXXXXX
                XF     X
                XFF    X
                XF     X
                XF     X
                XXXXXXXX

             Subproblems:
              -How to find closest exisisting valid move with a movement that can be the previous
               movement.


                
            -Non-reachable empty cells can have red stripes that fade in when starting a drag.
             Preferably with a red egde round the area. To calculate the valid area: for all valid
             moves, fill the valid area by painting the field by moving
             the move upwards until collision or above the falling piece.
        -Update the tutorial with drag controls.
        -Replace bad levels (especially in world 1) with levels of width 9 and asteroid levels. Try
         to make levels that don't have too much open area directly down to the bottom of the field
         from the falling piece since that makes the whole game a bit more random as you cannot see
         below the lowest visible row.
        -Release.
        -Purchasing.
        -Release.
        -Try to get the game featured by apple by contacting them by filling out the form.

    -Maybe:
        -A z-axis (backwards compared to the portal camera movement) camera movement could happen
         after going back to the map after clearing a level before the ufo animation. Can have a
         white fade effect when going to the map scene after clearing a level.
        -Maybe introduce real fog (https://www.youtube.com/watch?v=qslBNLeSPUc )instead of lower
         haze layers. Could add a terrain shader with fog support and a cloud shader. Could also
         have culling of distant objects in the renderer so that the map scene can have terrain
         segments far away without any extra cost, which would look better during the z camera
         movement.
        -Maybe cut the game_track1 a bit earlier.
        -Could have a slower falling piece animation speed for the first tutorial level so that
         players understand that the falling piece has to go to the move.
        -Maybe let the number of visible level rows in the scroll controller be configurable by the
         level because some levels are better with more look ahead.




    -How to make a release without micro transactions:
        -Make a release branch.
        -Commits to cherry pick:, or look at the january_release branch.
            1. Removed the micritransaction-related stuff from the map hud. 48099983d243a7834fffd4f6850fc048098d9f4f
            2. Disabled all microtransactions. 37e4a9d4cebe55308ff3719ed1ecf1361d05707a
            3. Dont cherry pick but do changes in Src/RowBlast/Scenes/Map/Worlds/World4.cpp:
               Fixed bug where the 4th world was available in release build. 93a1a46e20bd1e03e8cb2c0f6129d8145f670c3d
            4. Dont cherry pick but do most of it: Prepare for release. ddb45034497fc66a958f1e4def4bbf45212de661

    -Moves left in assumed user strength play:
      World 2:
        Level 23: 10
        Level 24: 9
        Level 25: 9
        Level 26: 9
        Level 27: 9
        Level 28: 8
        Level 29: 8
        Level 30: 8
        Level 31: 8
        Level 32: 7
        Level 33: 7
      World 3:
        Level 34: 6
        Level 35: 10
        Level 36: 12
        Level 37: 6
        Level 38: 5
        Level 39: 5
        Level 40: 5
        Level 41: 5
        Level 42: 4
        Level 43: 4
        Level 44: 4
        Level 45: 3
        Level 46: 4
        Level 47: 3
        Level 48: 4
        Level 49: 4
        Level 50: 2

    -Levels moved to world 4:
      -Level 65.
      -Level 66.
      -Level 67.
      -Level 73.


Ordered Backlog:
    -Convert GameScene into a Pht::Scene.
        Cost: 10
        Done
    -Let each GuiView be a subscene that can be merged into the current scene.
        Cost: 5
        Done
    -Finalize gameplay.
        Cost: 10
        Done
    -Fix all bugs.
        Cost: 7
        Done
    -Preview piece animation.
        Cost: 5
        Done
    -Block bounce.
        Cost: 5
        Done
    -Better particle effects for bombs and row bombs.
        Cost: 10
        Done
    -Bombs should have bomb meshes.
        Cost: 5
        Done
    -Try bombs part of level.
        Cost: 10
        Done
    -Camera shake.
        Cost: 3
        Done
    -Support for iPhone X screen.
        Cost: 10
        Done
    -Improving sliding text animation.
        Cost: 3
        Done
    -New GUI/Menus.
        Cost: 6
        Done
    -Animations/effects when clearing a level.
        Cost: 7
        Done
    -Dialog before level starts that states objectives and displays piece types.
        Cost: 2
        Done
    -Do the marked non-bug items in the backlog.
        Cost: 8
        Done
    -Animated movement of an avatar to the next level after clearing a level.
        Cost: 2
        Done
    -Go from one world to another.
        Cost: 3
        Done
    -Worlds.
        Cost: 4
        Done
    -Levels in the first world.
        Cost: 5
        Done
    -Tutorial.
        Cost: 10
        Done
    -Redesign the game HUD.
        Cost: 5
        Done
    -Levels in the second world.
        Cost: 7
        Done
    -Finish the remaining title and map scene-related rendering tasks.
        Cost: 7
        Done
    -Space world.
        Cost: 10
        Done
    -Do the most important gameplay tasks.
        Cost: 8
        Done
    -Do the most important game scene-related rendering tasks.
        Cost: 4
        Done
    -Store GUI.
        Cost: 15
        Done
    -Rewrite the audio system.
        Cost: 5
        Done
    -Music.
        Cost: 4
        Done
    -Sound effects.
        Cost: 10
        Done
    -Analytics.
        Cost: 17
        Done
    -Finish the top two rendering tasks.
        Cost: 2
        Done
    -Finish the most important GUI tasks.
        Cost: 5
        Done
    -Levels for the space world.
        Cost: 7
        Done
    -Replace the tutorial slide animations with Pht animations.
        Cost: 5
        Done
    -Revise some of the levels.
        Cost: 5
        Done
    -Drag controls.
        Cost: 20
    -Drag controls in tutorial and how to play dialog.
        Cost: 5
    -Replace some levels in world 1.
        Cost: 3
    -Remove moves from world 1 to 3.
        Cost: 1
    -Purchasing.
        Cost: 5
    -Levels for the 4th world.
        Cost: 7
    -Metal.
        Cost: 30
    -Net/HTTP.
        Cost: 10
    -Login/sign up account.
        Cost: 10
    -Back end.
        Cost: ?

        Total cost: 324


Levels:
    -Levels moved to world 4:
      -Level 65.
      -Level 66.
      -Level 67.


Comomon piece type sets:
    Easy:               RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven"  G
    Triangles:          RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Triangle",     R
        "BigTriangle",    B
        "Bomb",
        "RowBomb"
    Only triangles:     RGBY:
        "SmallTriangle",R
        "Triangle",     R
        "BigTriangle",    B
        "Diamond",       G
        "Pyramid",         Y
        "Bomb",
        "RowBomb"
    Medium:             RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven", G
        "F",            R
        "MirroredF"       B
    Medium, a variant:  RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven", G
        "Z",               Y
        "MirroredZ"      G
    Hard:               RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
    Hard, variant:      RGBY:
        "LongI",           Y
        "ShortI",         B
        "L",               Y
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
    Hard, variant:      RGBY:
        "LongI",           Y
        "I",             G
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
        "T",              B
    Really hard:        RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
        "Plus"            B
    All pieces:         RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven"  G
        "Triangle",     R
        "BigTriangle",    B
        "SmallTriangle",R
        "Diamond",       G
        "Pyramid",         Y
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
        "T",              B
        "Plus"            B

        Color:    NumbBlocks:
        Red             12.5
        Green           18.0
        Blue            27.5
        Yellow          15.0


Decision notes on level bombs:
        -Should level bombs be counted as full blocks that can be used to clear a row?
            -One idea was that rows containging level bombs could be cleared and the level bombs
             should not trigger since the only way of choosing not to use those level bombs would
             have been to fill the row. However, after testing it became clear that rows with level
             bombs were often cleared by mistake during for example cascading, or you would end up
             in a situation where you would have to clear them even though it will lead to failing
             the level. So it was decided that level bombs does not count as full blocks that can
             clear a row. It also solves the ambiguous case when landing on level bombs and at the
             same time clearing the row containg those level bombs and some extra bombs. Should all
             those level bombs be triggered or only the ones landed on?
        -If level bombs get pulled down and land should they trigger?
            -They should not triggering since this could open up for more strategic play by letting
             the player move level bombs to different rows.
        -If pulled down piece blocks (not gray level blocks) land on level bombs should they trigger?
            -In one way it is logical if they trigger since level bombs trigger when pieces land on
             them. On the other hand, it seems to be hard for the player to prevent pulled down
             blocks from accidentaly hitting bombs at lower rows. Probably tricky to implement but
             it might go something like this:
             during pulling down of pieces, Field detects that a level bomb will eventually be
             land on by piece blocks. The Field then adds that event to GameLogic which will
             detonate the level bomb once it is Updated again (after the CollapsingFieldAnimation is
             done with dragging down the piece blocks position).

Store GUI:
        -Purchase Successful dialog:
             If store opened from pressing add coins in map hud then
                Go back to map.                                         [OK]
             End
             If store was opened from out of moves dialog
                If there is enough coins for more moves then
                    Go back to game with extra moves.                   [OK]
                Else
                    Go back to store menu.                              [OK]
                End
             End
             If store was opened from no lives dialog
                If there is enough coins for refilling lives then
                    If no lives dialog was opened from map hud add lives button
                        Go back to map.                                 [OK]
                    End
                    If no lives dialog was opened from a map start level
                        Go to to the level goal dialog for that level.  [OK]
                    End
                    If no lives dialog was opened from a level restart
                        Go to to the level goal dialog for that level.  [OK]
                    End
                    If no lives dialog was opened from a game over retry
                        Go to to the level goal dialog for that level.  [OK]
                    End
                Else
                    Go back to store menu.                              [OK]
                End
             End
        -Out of moves dialog, clicking on continue button:
             If having enough coins then
                Go back to game with extra moves.                       [OK]
             Else
                Go to store.                                            [OK]
             End
        -Out of moves dialog, clicking on close button:
             If having lives
                Go to the level goal dialog for that level.             [OK]
             Else
                Go back to map.                                         [OK]
             End
        -No lives dialog, clicking continue button:
             If having enough coins for refilling lives then
                If no lives dialog was opened from a level restart then
                    Go to to the level goal dialog for that level.      [OK]
                End
                If no lives dialog was opened from a game over retry then
                    Go to to the level goal dialog for that level.      [OK]
                End
                If no lives dialog was opened from a map start level then
                    Go to to the level goal dialog for that level.      [OK]
                End
                If no lives dialog was opened from map hud add lives button then
                    Go back to map.                                     [OK]
                End
             Else
                Go to store.                                            [OK]
             End



Frame stats:
Use random seed of 12345 in Engine.cpp and Clouds.cpp to get the same numbers.

With render queue refactoring and static batching:

Beginning of first world. 5 lives, 0 coins:
=======================================
 NumShaderUses: 19
 NumMaterialUses: 96
 NumTextureBinds: 127
 NumVboUses: 118
 NumDrawCalls: 256

With render queue refactoring:

Beginning of first world. 5 lives, 0 coins:

=======================================
 NumShaderUses: 19
 NumMaterialUses: 138
 NumTextureBinds: 127
 NumVboUses: 105
 NumDrawCalls: 293

Before render queue refactoring and static batching:

Beginning of first world. 5 lives, 0 coins:
=======================================
 NumShaderUses: 19
 NumMaterialUses: 182
 NumTextureBinds: 135
 NumVboUses: 136
 NumDrawCalls: 293

Beginning of level 3:
=======================================
 NumShaderUses: 10
 NumMaterialUses: 65
 NumTextureBinds: 33
 NumVboUses: 27
 NumDrawCalls: 114

Beginning of level 11:
 =======================================
 NumShaderUses: 16
 NumMaterialUses: 45
 NumTextureBinds: 44
 NumVboUses: 28
 NumDrawCalls: 106

Beginning of level 17:
=======================================
 NumShaderUses: 12
 NumMaterialUses: 96
 NumTextureBinds: 36
 NumVboUses: 31
 NumDrawCalls: 155

Beginning of level 20:
=======================================
 NumShaderUses: 39
 NumMaterialUses: 80
 NumTextureBinds: 70
 NumVboUses: 59
 NumDrawCalls: 129

Add these clouds before generating sky background texture from title scene:
        CloudPathVolume {
            .mPosition = {-7.5f, -47.0f, -100.0f},
            .mSize = {0.0f, 0.0f, 0.0f},
            .mCloudSize = {30.0f, 30.0f},
            .mNumClouds = 2,
        },
        CloudPathVolume {
            .mPosition = {-15.0f, -60.0f, -100.0f},
            .mSize = {0.0f, 0.0f, 0.0f},
            .mCloudSize = {30.0f, 30.0f},
            .mNumClouds = 2,
        },
        CloudPathVolume {
            .mPosition = {10.0f, -60.0f, -100.0f},
            .mSize = {0.0f, 0.0f, 0.0f},
            .mCloudSize = {25.0f, 25.0f},
            .mNumClouds = 2,
        },

This is the lossless env map texture: Desktop/sky_upside_down_patched_mirrored_f10.xcf.

Create rounded cube in Blender:
Scale cube so that size is 1.0. Select the wrench to the right.
Then, Add Modifier > Bevel > turn up width > turn up segments.

triangle_320:
bevel width: 0.115
segments: 5
profile 0.5
Export settings:
    Forward: Y Forward
    Up: Z Up

cube_428:
bevel width: 0.115
weld size: 0.19
segments: 5
profile 0.5

medium_button_skewed_0385.obj:
size: 9.0x2.1
shear: 0.24
bevel width: 0.385
segments: 5


FreeType compilation:
Put the build_freetype.sh script in freetype root dir then execute it.


Did this to get around problem with app not launching on device:
Product -> Scheme -> Edit Scheme -> Info -> Executable -> Ask on Launch
(https://stackoverflow.com/questions/52415694/ios-12-ipad-denied-launch-request-xcode/52584195#52584195)

A side effect is that the debugger does not work with this setting so can only debug in simulator
and when setting it back the the original settings:
Product -> Scheme -> Edit Scheme -> Info -> Executable -> Game.app
