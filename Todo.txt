Backlog:
  -Engine:
    -Purchasing.
    -Metal.
    -Net/HTTP.
    -Android.

  -Gameplay:
    -A third input method could be to drag pieces from the HUD into the field. If you click on one
     piece in the HUD then it rotates. The selectable pieces area (and pieces) in the HUD could be a
     bit bigger when using drag controls to reduce misclicks. Each cell that is not reachable from
     the top (an illegal move) could be red. A question is if real solid pieces should be dragged in
     or ghost pieces. Real pieces will look better but it is more logical to drag in ghost pieces
     since the real piece is actually at the top and it will drop to the location of the ghost piece
     really quickly (preferably almost as fast as a hard drop like in swipe controls). Or the real
     falling piece at the top could disappear (scale out) when the real solid piece is being dragged
     in and then it might be ok to drag in real pieces. When the
     piece har dropped, the empty slot in the selectables HUD should be taken over by the next piece
     without rearranging the selectable pieces. What happens with the falling piece once one of the
     selectables (not the active piece) are being dragged in? Maybe it should only be possible to
     drag in the active piece? In that case, rotating the active piece could be done by clicking on
     it in the hud and and clicking on the two selectables could switch piece.
     Another version of this idea is to combine drag input with swipe input (effectively forming the
     swipe/drag input type). So then there would be drag/swipe input or click input. This could be
     possible if (either 1.a OR 1.b OR 1.c) and 2:
     Either (1.a): rotating pieces using drag/swipe input is only done by tapping the screen as in
     pure swipe controls (this would then rotate all pieces in the selectables container, but they
     could rotate back to their default rotation at the next move or switch piece)
     since rotating a selectable piece by clicking the piece in the selectables container would be
     indistinguishable from switching active piece. Switching active piece in 1.a could be done by
     tapping the selectables container.
     Or (1.b): switching active piece using drag/swipe input is only done by swiping up since
     switching active piece by clicking the selectables container would be indistinguishable from
     rotating the piece in the selectables container. Rotating a piece in 1.a could be done by
     tapping the the piece in the selectables container.
     Or (1.c): switching active piece using drag/swipe input is only done by swiping up and rotating
     pieces using drag/swipe input is only done by tapping the screen. Touching the selectables
     container would only be for starting a drag and the start of the touch would not be ambiguous
     in any way (start drag or switch-piece/rotate?)
     And 2: ther can be no traditional ghost piece present all time when using drag/swipe input
     since it would interfere with the ghost piece being dragged in to the field. The traditional
     constant ghost piece for swipe input could be present but removed once a drag is started and
     it could consist of transparent normal blocks (or transparent grey quads is in Tetris Blitz,
     or like Poyo Poyo Tetris) to set it apart from other ghost pieces.
    -Could have ice blocks that are level blocks that can be used to fill and clear rows but they
     shatter if landed on or if falling down in a cascade. Or, they could turn into a normal grey
     level block if the ice is cleared which it will be by filling the row or explosion/laser.
    -A game objective could be to clear all purple blocks. Purple blocks are affected by gravity
     like the other colored blocks.
    -The UFO could be booster. It could clear 3 rows.
    -Maybe blocks in the visible part of the field could disappear on some levels. For each move,
     one of the colored blocks randomly disappears.
    -Maybe a sensitivity setting. Tetris Blitz has lower sensitivity on iPad but not on iPhone.
  -Rendering:
    -Maybe add an alien landscape to the sky worlds.
    -Add dynamic batching of objects with very few indices and no rotation if the saved cost of
     eliminated state changes is greater than the cost of creating the batch. Then, the clouds can
     be batched and drawn in one draw call instead of 100. Also, a lot of particle effects
     (the explosions, block trails, lasers etc.) that have the same texture/material can be batched.
     The GLES3Renderer could scan ahead in the render queue and sum up the number of future state
     changes required to draw each consecutive batchable object of the same material and compare
     that cost to some pseudo cast of creating the batch of that sequence of batchable objects.
     The batch would go into a preallocated VertexBuffer with large capacity that the GLES3Renderer
     owns. Also, the RenderObject function probably needs take Material/GpuVertexBuffer pairs rather
     than RenderableObjects since a batch consists of a GpuVertexBuffer with CPU-side VertexBuffer
     and a Material and not a RenderableObject.
    -Try to compressing bouncing blocks that lands on lower blocks. Compress the vertical welds on
     each side of the compressed block as well.
    -Animation that moves the map hud out of the screen when clicking buttons in the hud. Could work
     in a similar way as the SlidingFieldAnimation.
    -Animation that moves the pause button out of the screen.
  -GUI:
  -Make ready for release:
    -Should give free gold coins after a new install?
    -Maybe only one or two continues per game round? Like in Dr. Mario. And you get 10 more moves.
    -Limit the number of undo move to one or two per game round.
    -Update mail address in legal documents.
    -Go through all user services and check that all state store/load is enabled.
    -Make sure analytics is enabled and that user terms accept is saved and checked.
    -Make sure analytics debug log is disabled.
    -Make sure the correct product price in cents and receipt is sent to analytics.
    -Look into the problem of reduced framerate sometimes on iPhoneX.
    -Do a soft launch in a couple of countries? Maybe the nordic countries and UK? Only english
     localization is needed for that. And/or, before that, a small soft launch only in one country
     instead of a playtest since that may give bettar data than a playtest since the players will
     mostly be the target audince and in the playtest they are not.
    -Make sure that creation dates for the resource files that I have created are not too old.
    -Maybe support for different languages.

Ongoing tasks:
    -Remove the section about payments in the privacy policy on the pre-release branch.
    -All apps must include a link to their privacy policy in the App Store Connect metadata field.


    -Add drag controls and release with microtransactions enabled, free to download.


    -Maybe the drag controls should only be active with gesture controls. Drag does not add that
     much to click controls and it is a bit confusing when the preview pieces rotate and the
     clickable moves rotates/move in completely unrelated ways. Also, if switching piece when using
     gesture controls is only done by swipe up, then the start of a drag and switch will not be
     ambiguous.
    -Maybe a transparant real piece should be dragged in with a ghost piece under it. When the piece
     is released, there will be a falling piece animation going from the real piece at the top down
     to the placed transparant piece. Then it will be clear that pieces can only be placed at
     locations that are reachable from the real piece at the top. The transparant pieces don't need
     welds. The falling piece is changed to the piece type of the piece being dragged in and changed
     back to the active piece type when the dragged piece is going back to the selectables. If a
     piece is dragged and released in mid-air then the falling piece will go to that location using
     the normal fast falling piece animation and when the falling piece has arrived then the piece
     will fall using gravity (same way and speed as pull down loose pieces) until it hits anything.
    -Create a DragInputHandler that handles drag input. It has one Pht::Button per preview piece.
    -Create a DraggedPiece that has a state, scene position or hud position and field grid position.
     It should know where to quickly travel when touched in the hud so that the
     DraggedPieceAnimation can animate that.
    -Create a DraggedPieceAnimation for animating the dragged piece leaving the selectables
     continer, going back to the selectables and being placed at a legal move in the field. It is
     probably good if the dragged piece is rendered in the hud render pass as long as it is solid
     and mostly within the selectables container but when it leaves the selectables container
     completely it must be a different scene object that is not in the hud render pass. The dragged
     piece cannot be in the hud render pass once the dragged piece is over the field because of the
     different hud pass light setting and hud camera position affecting env mapping.





    -Make a new pause button at the top-right corner and make a moves toggle button at the pause
     buttons old location. Or, it might be room for both at the bottom left if the next pieces are
     vertical and to the right side of the selectables.
    -The ghost piece for swipe controls could be like in Tetris Blits, or preferebly like in Puyo
     Puyo Tetris or just a transparant real piece (although transparant real pieces could be
     difficult if the welds should be part of the ghost piece since the weld will be drawn over the
     blocks and cause strange blending). That ghost piece should look the same as the ghost piece
     under a real piece being dragged in from the HUD. The ghost piece should not be visible if the
     dragged piece is over an illegal move.
    -Remember to update the switch piece Pht::Button input size after the changes.
    -Update the tutorial with drag controls.





    -Might even make the active preview piece a bit larger and/or adding and effect/animation to set
     it apart from the other selectables.
    -Try combining all three input types to one. Maybe possible if the visibility of the move
     alternatives can be toggled with a button next to the pause button. Or the pause button goes
     to the top right corner of the screen and the toggle button takes the pause buttons old place.
     Alt 1: Switch piece could be done
     by swiping left or right inside the selectable cotainer. Swipe left shifts the selectables to
     left, swipe right shifts them to the right. This way rotating a single selectable is done by
     clicking the preview piece in the selectables container and any selectable could be dragged in,
     not just the active one.
     Alt 2: Switch by clicking the selectables container or swipe the container left or right.
     Rotate by tapping the screen, this rotates all selectables in the HUD. If clickadble move
     alternatives are active then the falling piece does not rotate. If If clickadble move
     alternatives are not active then the falling piece also rotates. All selectables should rotate
     back to their default rotation on switch piece or next move.
    -Could have a falling piece animation that stops at the closest legal move and then goes back to
     to top, if the user tries to drag in a piece to an illegal move.



    -Go through the levels in world 1.
        -Maybe introduce the laser at level 4 or 3 even.
        -Maybe introduce the bomb at level 6 or 5.



    -Tutorial: Pht animation showing how to fill gray slots. It should show the field scroll up
     after filling all slots in a row.
    -Tutorial: Maybe there could be a cascading/gravity animation.



    -Moves left in assumed user strength play:
      World 2:
        Level 23: 10
        Level 24: 9
        Level 25: 9
        Level 26: 9
        Level 27: 9
        Level 28: 8
        Level 29: 8
        Level 30: 8
        Level 31: 8
        Level 32: 7
        Level 33: 7
      World 3:
        Level 34: 6
        Level 35: 10
        Level 36: 12
        Level 37: 6
        Level 38: 5
        Level 39: 5
        Level 40: 5
        Level 41: 5
        Level 42: 4
        Level 43: 4
        Level 44: 4
        Level 45: 3
        Level 46: 4
        Level 47: 3
        Level 48: 4
        Level 49: 4
        Level 50: 2

    -Levels moved to world 4:
      -Level 65.
      -Level 66.
      -Level 67.
      -Level 73.


Ordered Backlog:
    -Convert GameScene into a Pht::Scene.
        Cost: 10
        Done
    -Let each GuiView be a subscene that can be merged into the current scene.
        Cost: 5
        Done
    -Finalize gameplay.
        Cost: 10
        Done
    -Fix all bugs.
        Cost: 7
        Done
    -Preview piece animation.
        Cost: 5
        Done
    -Block bounce.
        Cost: 5
        Done
    -Better particle effects for bombs and row bombs.
        Cost: 10
        Done
    -Bombs should have bomb meshes.
        Cost: 5
        Done
    -Try bombs part of level.
        Cost: 10
        Done
    -Camera shake.
        Cost: 3
        Done
    -Support for iPhone X screen.
        Cost: 10
        Done
    -Improving sliding text animation.
        Cost: 3
        Done
    -New GUI/Menus.
        Cost: 6
        Done
    -Animations/effects when clearing a level.
        Cost: 7
        Done
    -Dialog before level starts that states objectives and displays piece types.
        Cost: 2
        Done
    -Do the marked non-bug items in the backlog.
        Cost: 8
        Done
    -Animated movement of an avatar to the next level after clearing a level.
        Cost: 2
        Done
    -Go from one world to another.
        Cost: 3
        Done
    -Worlds.
        Cost: 4
        Done
    -Levels in the first world.
        Cost: 5
        Done
    -Tutorial.
        Cost: 10
        Done
    -Redesign the game HUD.
        Cost: 5
        Done
    -Levels in the second world.
        Cost: 7
        Done
    -Finish the remaining title and map scene-related rendering tasks.
        Cost: 7
        Done
    -Space world.
        Cost: 10
        Done
    -Do the most important gameplay tasks.
        Cost: 8
        Done
    -Do the most important game scene-related rendering tasks.
        Cost: 4
        Done
    -Store GUI.
        Cost: 15
        Done
    -Rewrite the audio system.
        Cost: 5
        Done
    -Music.
        Cost: 4
        Done
    -Sound effects.
        Cost: 10
        Done
    -Analytics.
        Cost: 17
        Done
    -Finish the top two rendering tasks.
        Cost: 2
        Done
    -Finish the most important GUI tasks.
        Cost: 5
        Done
    -Levels for the space world.
        Cost: 7
        Done
    -Replace the tutorial slide animations with Pht animations.
        Cost: 5
    -Revise some of the levels.
        Cost: 5
    -Purchasing.
        Cost: 10
    -Release-related tasks.
        Cost: 7
    -Small soft launch.
        Cost: 5
    -Soft launch.
        Cost: 5
    -Levels for the 4th world.
        Cost: 7
    -Metal.
        Cost: 30
    -Net/HTTP.
        Cost: 10
    -Login/sign up account.
        Cost: 10
    -Back end.
        Cost: ?

        Total cost: 327


Levels:
    -Levels moved to world 3:
      -Level 48.
      -Level 49.
    -Levels moved to world 4:
      -Level 65.
      -Level 66.
      -Level 67.


Comomon piece type sets:
    Easy:               RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven"  G
    Triangles:          RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Triangle",     R
        "BigTriangle",    B
        "Bomb",
        "RowBomb"
    Only triangles:     RGBY:
        "SmallTriangle",R
        "Triangle",     R
        "BigTriangle",    B
        "Diamond",       G
        "Pyramid",         Y
        "Bomb",
        "RowBomb"
    Medium:             RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven", G
        "F",            R
        "MirroredF"       B
    Medium, a variant:  RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven", G
        "Z",               Y
        "MirroredZ"      G
    Hard:               RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
    Hard, variant:      RGBY:
        "LongI",           Y
        "ShortI",         B
        "L",               Y
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
    Hard, variant:      RGBY:
        "LongI",           Y
        "I",             G
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
        "T",              B
    Really hard:        RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
        "Plus"            B
    All pieces:         RGBY:
        "LongI",           Y
        "I",             G
        "L",               Y
        "B",              B
        "D",            R
        "Seven",          B
        "MirroredSeven"  G
        "Triangle",     R
        "BigTriangle",    B
        "SmallTriangle",R
        "Diamond",       G
        "Pyramid",         Y
        "F",            R
        "MirroredF",      B
        "BigL",          G
        "Z",               Y
        "MirroredZ"      G
        "T",              B
        "Plus"            B

        Color:    NumbBlocks:
        Red             12.5
        Green           18.0
        Blue            27.5
        Yellow          15.0


Decision notes on level bombs:
        -Should level bombs be counted as full blocks that can be used to clear a row?
            -One idea was that rows containging level bombs could be cleared and the level bombs
             should not trigger since the only way of choosing not to use those level bombs would
             have been to fill the row. However, after testing it became clear that rows with level
             bombs were often cleared by mistake during for example cascading, or you would end up
             in a situation where you would have to clear them even though it will lead to failing
             the level. So it was decided that level bombs does not count as full blocks that can
             clear a row. It also solves the ambiguous case when landing on level bombs and at the
             same time clearing the row containg those level bombs and some extra bombs. Should all
             those level bombs be triggered or only the ones landed on?
        -If level bombs get pulled down and land should they trigger?
            -They should not triggering since this could open up for more strategic play by letting
             the player move level bombs to different rows.
        -If pulled down piece blocks (not gray level blocks) land on level bombs should they trigger?
            -In one way it is logical if they trigger since level bombs trigger when pieces land on
             them. On the other hand, it seems to be hard for the player to prevent pulled down
             blocks from accidentaly hitting bombs at lower rows. Probably tricky to implement but
             it might go something like this:
             during pulling down of pieces, Field detects that a level bomb will eventually be
             land on by piece blocks. The Field then adds that event to GameLogic which will
             detonate the level bomb once it is Updated again (after the CollapsingFieldAnimation is
             done with dragging down the piece blocks position).

Store GUI:
        -Purchase Successful dialog:
             If store opened from pressing add coins in map hud then
                Go back to map.                                         [OK]
             End
             If store was opened from out of moves dialog
                If there is enough coins for more moves then
                    Go back to game with extra moves.                   [OK]
                Else
                    Go back to store menu.                              [OK]
                End
             End
             If store was opened from no lives dialog
                If there is enough coins for refilling lives then
                    If no lives dialog was opened from map hud add lives button
                        Go back to map.                                 [OK]
                    End
                    If no lives dialog was opened from a map start level
                        Go to to the level goal dialog for that level.  [OK]
                    End
                    If no lives dialog was opened from a level restart
                        Go to to the level goal dialog for that level.  [OK]
                    End
                    If no lives dialog was opened from a game over retry
                        Go to to the level goal dialog for that level.  [OK]
                    End
                Else
                    Go back to store menu.                              [OK]
                End
             End
        -Out of moves dialog, clicking on continue button:
             If having enough coins then
                Go back to game with extra moves.                       [OK]
             Else
                Go to store.                                            [OK]
             End
        -Out of moves dialog, clicking on close button:
             If having lives
                Go to the level goal dialog for that level.             [OK]
             Else
                Go back to map.                                         [OK]
             End
        -No lives dialog, clicking continue button:
             If having enough coins for refilling lives then
                If no lives dialog was opened from a level restart then
                    Go to to the level goal dialog for that level.      [OK]
                End
                If no lives dialog was opened from a game over retry then
                    Go to to the level goal dialog for that level.      [OK]
                End
                If no lives dialog was opened from a map start level then
                    Go to to the level goal dialog for that level.      [OK]
                End
                If no lives dialog was opened from map hud add lives button then
                    Go back to map.                                     [OK]
                End
             Else
                Go to store.                                            [OK]
             End



Frame stats:
Use random seed of 12345 in Engine.cpp and Clouds.cpp to get the same numbers.

With render queue refactoring and static batching:

Beginning of first world. 5 lives, 0 coins:
=======================================
 NumShaderUses: 19
 NumMaterialUses: 96
 NumTextureBinds: 127
 NumVboUses: 118
 NumDrawCalls: 256

With render queue refactoring:

Beginning of first world. 5 lives, 0 coins:

=======================================
 NumShaderUses: 19
 NumMaterialUses: 138
 NumTextureBinds: 127
 NumVboUses: 105
 NumDrawCalls: 293

Before render queue refactoring and static batching:

Beginning of first world. 5 lives, 0 coins:
=======================================
 NumShaderUses: 19
 NumMaterialUses: 182
 NumTextureBinds: 135
 NumVboUses: 136
 NumDrawCalls: 293

Beginning of level 3:
=======================================
 NumShaderUses: 10
 NumMaterialUses: 65
 NumTextureBinds: 33
 NumVboUses: 27
 NumDrawCalls: 114

Beginning of level 11:
 =======================================
 NumShaderUses: 16
 NumMaterialUses: 45
 NumTextureBinds: 44
 NumVboUses: 28
 NumDrawCalls: 106

Beginning of level 17:
=======================================
 NumShaderUses: 12
 NumMaterialUses: 96
 NumTextureBinds: 36
 NumVboUses: 31
 NumDrawCalls: 155

Beginning of level 20:
=======================================
 NumShaderUses: 39
 NumMaterialUses: 80
 NumTextureBinds: 70
 NumVboUses: 59
 NumDrawCalls: 129



Do this before making tutorial slides:
    -Remove floating blocks
    -Disable light animation
    -Disable camera shake
    -Disable bomb emission animation
    -Disable bomb rotation animation
Gimp rectangle select:
size: 481, 481


Add these clouds before generating sky background texture from title scene:
        CloudPathVolume {
            .mPosition = {-7.5f, -47.0f, -100.0f},
            .mSize = {0.0f, 0.0f, 0.0f},
            .mCloudSize = {30.0f, 30.0f},
            .mNumClouds = 2,
        },
        CloudPathVolume {
            .mPosition = {-15.0f, -60.0f, -100.0f},
            .mSize = {0.0f, 0.0f, 0.0f},
            .mCloudSize = {30.0f, 30.0f},
            .mNumClouds = 2,
        },
        CloudPathVolume {
            .mPosition = {10.0f, -60.0f, -100.0f},
            .mSize = {0.0f, 0.0f, 0.0f},
            .mCloudSize = {25.0f, 25.0f},
            .mNumClouds = 2,
        },


Create rounded cube in Blender:
Scale cube so that size is 1.0. Select the wrench to the right.
Then, Add Modifier > Bevel > turn up width > turn up segments.

triangle_320:
bevel width: 0.13
segments: 5
profile 0.5
Export settings:
    Forward: Y Forward
    Up: Z Up

cube_428:
bevel width: 0.13
weld size: 0.19
segments: 5
profile 0.5

medium_button_skewed_0385.obj:
size: 9.0x2.1
shear: 0.24
bevel width: 0.385
segments: 5


FreeType compilation:
Put the build_freetype.sh script in freetype root dir then execute it.


Did this to get around problem with app not launching on device:
Product -> Scheme -> Edit Scheme -> Info -> Executable -> Ask on Launch
(https://stackoverflow.com/questions/52415694/ios-12-ipad-denied-launch-request-xcode/52584195#52584195)

A side effect is that the debugger does not work with this setting so can only debug in simulator
and when setting it back the the original settings:
Product -> Scheme -> Edit Scheme -> Info -> Executable -> Game.app
